trigger: none

pool:
  vmImage: 'ubuntu-latest'

resources:
  pipelines:
    - pipeline: continuous-integration
      source: FrontEnd/ContinuousIntegration
      trigger:
        branches:
          include:
            - develop

variables:
  projectId: '4c1f4cba-da43-4422-a077-8b7a47bb1cf2'
  buildPipelineId: '62'
  webAppName: 'mysitedev'
  azureConnection: 'Azure Resource Manager Connection'
  dockerImageRepo: 'mysitefrontend'
  acrName: 'hasacr.azurecr.io'
  resourceName: 'HasDev'

stages:
  - stage: Deploy
    displayName: 'Deploy to DEV'
    jobs:
      - deployment: Deploy
        environment: 'DeployDev'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/deploy-template.yml
                  parameters:
                    projectId: $(projectId)
                    buildPipelineId: $(buildPipelineId)
                    appServiceName: $(webAppName)
                    azureResourceServiceConnection: $(azureConnection)
                    imageRepository: $(dockerImageRepo)
                    containerRegistry: $(acrName)
                    resourceGroupName: $(resourceName)

  - stage: PublishArtifact
    dependsOn: Deploy
    displayName: 'Publish Build Artifact'
    jobs:
      - job: PublishBuildId
        displayName: 'Publish Build ID Artifact'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'specific'
              project: $(projectId)
              definition: $(buildPipelineId)
              buildVersionToDownload: 'latest'
              targetPath: '$(Pipeline.Workspace)'

          - script: |
              echo "Checking files in $(Pipeline.Workspace)/BuildId"
              ls -l $(Pipeline.Workspace)/BuildId
              buildId=$(cat $(Pipeline.Workspace)/BuildId/buildId.txt)
              echo "Build ID: $buildId"
              echo "##vso[task.setvariable variable=buildId]$buildId"
              echo "$(acrName)/$(dockerImageRepo):$buildId"
            displayName: 'Extract Build ID'

          - script: echo $(buildId) > $(Build.ArtifactStagingDirectory)/buildId.txt
            displayName: 'Save TagVersion to File'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build ID'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'BuildId'
              publishLocation: 'Container'

  - stage: ContinuousIntegrationMaster
    dependsOn: PublishArtifact
    displayName: Continuous Integration Master
    jobs:
      - deployment: ApprovalAndMerge
        displayName: 'Approve and Merge to Master'
        environment: 'DeployPro'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo $(System.StageAttempt)
                    if [ "$(System.StageAttempt)" -eq "1" ]; then
                      echo "approved"
                      echo "##vso[task.setvariable variable=status;isOutput=true]approved"
                    else
                      echo "rejected"
                      echo "##vso[task.setvariable variable=status;isOutput=true]rejected"
                    fi
                  name: DetermineApprovalStatus
                  continueOnError: true

      - job: IntegrationJob
        dependsOn: ApprovalAndMerge
        variables:
          deployJobVar: $[dependencies.ApprovalAndMerge.outputs['ApprovalAndMerge.DetermineApprovalStatus.status']]
        steps:
          - script: |
              echo $(deployJobVar)
            displayName: 'Output Approval Status'

          - checkout: self
            persistCredentials: true
            fetchDepth: 0
            displayName: 'Checkout Repository'

          - script: |
              echo "Switching to master branch"
              git checkout master
            displayName: 'Switching to master branch'

          - script: |
              echo "Configuring Git"
              git config user.name "Henk Sandoval"
              git config user.email "henk.sandoval@outlook.com"
            displayName: 'Set Git User Config'

          - script: |
              echo "Merging develop into master"
              git merge origin/develop
            displayName: 'Merge Develop into Master Branch'

          - script: |
              echo "Pushing changes to master"
              git push origin master
            displayName: 'Push to Master Branch'
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
