trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: SonarQube
  - name: acrConnection
    value: 'Azure Container Registry Connection'
  - name: projectId
    value: '4c1f4cba-da43-4422-a077-8b7a47bb1cf2'
  - name: buildPipelineId
    value: '63'
  - name: azureConnection
    value: 'Azure Resource Manager Connection'
  - name: acrConnection
    value: 'Azure Container Registry Connection'
  - name: webAppName
    value: 'JobMagnetic'
  - name: resourceGroup
    value: 'HasDev'
  - name: acrName
    value: 'hasacr.azurecr.io'
  - name: dockerImageRepo
    value: 'jobmagnetic/frontend'

stages:
  - stage: DownloadArtifact
    displayName: 'Download Artifact Version'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: Download
        displayName: 'Download Version Artifact Dev'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'specific'
              project: $(projectId)
              definition: $(buildPipelineId)
              buildVersionToDownload: 'latest'
              targetPath: '$(Pipeline.Workspace)'

          - script: |
              echo "Checking files in $(Pipeline.Workspace)/BuildId"
              ls -l $(Pipeline.Workspace)/BuildId
              buildId=$(cat $(Pipeline.Workspace)/BuildId/buildId.txt)
              echo "Build ID: $buildId"
              echo "##vso[task.setvariable variable=buildId;isOutput=true]$buildId"
              echo "$(acrName)/$(dockerImageRepo):$buildId"
            name: ExtractBuildId
            displayName: 'Extract Build ID'

  - stage: CodeQuality
    displayName: 'Code Quality and Testing'
    jobs:
      - template: templates/code-quality-template.yml

  - stage: SetVersion
    dependsOn: CodeQuality
    jobs:
      - job: GitVersion
        displayName: 'Execute GitVersion'
        steps:
          - template: templates/execute-gitversion-template.yml

  - stage: PushImage
    displayName: 'Tag and Push Image to ACR'
    dependsOn:
      - SetVersion
      - DownloadArtifact
    jobs:
      - job: TagAndPush
        displayName: 'Tag and Push Docker Image'
        variables:
          gitVersionTag: $[stageDependencies.SetVersion.GitVersion.outputs['GitVersion.tag']]
          buildId: $[stageDependencies.DownloadArtifact.Download.outputs['ExtractBuildId.buildId']]
        steps:
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              command: 'login'
              containerRegistry: '$(acrConnection)'

          - script: |
              docker pull $(acrName)/$(dockerImageRepo):$(buildId)
              echo "Tagging the image"
              echo "docker tag $(acrName)/$(dockerImageRepo):$(buildId) $(acrName)/$(dockerImageRepo):$(gitVersionTag)"
              docker tag $(acrName)/$(dockerImageRepo):$(buildId) $(acrName)/$(dockerImageRepo):$(gitVersionTag)
              echo "Pushing the new tag"
              echo "docker push $(acrName)/$(dockerImageRepo):$(gitVersionTag)"
              docker push $(acrName)/$(dockerImageRepo):$(gitVersionTag)
            displayName: 'Pull, Tag and Push Image'

  - stage: Deploy
    dependsOn:
      - SetVersion
      - PushImage
    displayName: 'Deploy to PRO'
    jobs:
      - deployment: Deploy
        environment: 'DeployPro'
        variables:
          gitVersionTag: $[stageDependencies.SetVersion.GitVersion.outputs['GitVersion.tag']]
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: 'Deploy Container to App Service'
                  inputs:
                    azureSubscription: $(azureConnection)
                    appName: $(webAppName)
                    resourceGroupName: $(resourceGroup)
                    imageName: $(acrName)/$(dockerImageRepo):$(gitVersionTag)
