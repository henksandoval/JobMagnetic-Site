trigger:
  - develop

pool:
  vmImage: 'ubuntu-latest'

resources:
  - repo: self

variables:
  dockerRegistryServiceConnection: 'Azure Container Registry Connection'
  imageRepository: 'mysitefrontend'
  containerRegistry: 'hasacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/dockerfile'
  tag: '$(Build.BuildId)'

stages:
  - stage: CodeQuality
    displayName: 'Code Quality and Testing'
    jobs:
      - template: templates/code-quality-template.yml

  - stage: SetVersion
    dependsOn: CodeQuality
    jobs:
      - job: GitVersion
        displayName: 'Set Version'
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            fetchDepth: 0
            displayName: Disable Shallow fetch

          - task: gitversion/setup@0
            displayName: 'Install GitVersion'
            inputs:
              versionSpec: '6.x'

          - task: gitversion/execute@0
            displayName: 'Execute GitVersion'
            inputs:
              useConfigFile: true
              configFilePath: 'GitVersion.yml'

          - script: git tag $(GitVersion.NuGetVersionV2) && git push origin --tags
            displayName: 'Tag commit'

          - script: echo "##vso[task.setvariable variable=tag;isOutput=true]$(gitversion.NuGetVersionV2)"
            name: GitVersion
            displayName: 'Set GitVersion Tag Output Variable'

  - stage: ImageBuild
    dependsOn: SetVersion
    displayName: 'Build and Push Docker Image'
    jobs:
      - job: BuildImage
        displayName: 'Build and Push Image'
        variables:
          gitVersionTag: $[stageDependencies.SetVersion.GitVersion.outputs['GitVersion.tag'] ]
        steps:
          - script: |
              echo "GitVersion: $(gitVersionTag)"
            displayName: 'Check GitVersion'

          - task: Docker@2
            displayName: 'Build and Push to Registry'
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(gitVersionTag)

  - stage: PublishArtifact
    dependsOn:
      - SetVersion
      - ImageBuild
    displayName: 'Publish Build Artifact'
    variables:
      gitVersionTag: $[stageDependencies.SetVersion.GitVersion.outputs['GitVersion.tag'] ]
    jobs:
      - job: PublishBuildId
        displayName: 'Publish Build ID Artifact'
        steps:
          - script: |
              echo "GitVersion: $(gitVersionTag)"
            displayName: 'Check GitVersion'

          - script: echo $(gitVersionTag) > $(Build.ArtifactStagingDirectory)/buildId.txt
            displayName: 'Save TagVersion to File'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build ID'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'BuildId'
              publishLocation: 'Container'
